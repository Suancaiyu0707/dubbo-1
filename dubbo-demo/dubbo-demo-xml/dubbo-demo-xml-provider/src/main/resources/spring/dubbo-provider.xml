<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://dubbo.apache.org/schema/dubbo http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <dubbo:application name="demo-provider"/>

    <dubbo:registry address="zookeeper://127.0.0.1:2181"/>

    <dubbo:protocol name="dubbo"/>

    <bean id="demoService" class="org.apache.dubbo.demo.provider.DemoServiceImpl"/>

    <dubbo:service interface="org.apache.dubbo.demo.DemoService" ref="demoService"/>

    <bean id="asyncService1" class="org.apache.dubbo.demo.provider.AsyncServiceImpl"/>
    <dubbo:service interface="org.apache.dubbo.demo.AsyncService" ref="asyncService1"/>

    <bean id="asyncService2" class="org.apache.dubbo.demo.provider.AsyncServiceImpl2"/>
    <dubbo:service interface="org.apache.dubbo.demo.AsyncService2" ref="asyncService2"/>

    <!--本地调用-->
    <bean id="inJvmService" class="org.apache.dubbo.demo.provider.InjvmServiceImpl"/>
    <dubbo:service interface="org.apache.dubbo.demo.InjvmService" ref="inJvmService" protocol="injvm"/>
    <!--参数回调-->
    <bean id="callbackService" class="org.apache.dubbo.demo.provider.CallbackServiceImpl" />
    <dubbo:service interface="org.apache.dubbo.demo.CallbackService" ref="callbackService" connections="1" callbacks="1000">
        <dubbo:method name="addListener">
            <!--通过指定哪个参数是callback回调参数，这样它将为这个方法基于长连接生成反向代理，然后从服务器端调用客户端逻辑，不设置callback的话，服务端是调不到客户端的代码-->
            <dubbo:argument index="1" callback="true" />
            <!--也可以通过指定类型的方式-->
            <!--<dubbo:argument type="com.demo.CallbackListener" callback="true" />-->
        </dubbo:method>
    </dubbo:service>
    <!--事件通知-->
    <bean id="eventNotifyService" class="org.apache.dubbo.demo.provider.EventNotifyServiceImpl" />
    <dubbo:service interface="org.apache.dubbo.demo.EventNotifyService" ref="eventNotifyService" version="1.0.0" group="cn"/>
    <!--本地存根-->
    <bean id="stubService" class="org.apache.dubbo.demo.provider.StubServiceImpl" />
    <dubbo:service interface="org.apache.dubbo.demo.StubService" stub="org.apache.dubbo.demo.StubServiceStub" ref="stubService"/>
    <!--本地伪装-->
    <bean id="mockService" class="org.apache.dubbo.demo.provider.MockServiceImpl" />
    <dubbo:service interface="org.apache.dubbo.demo.MockService" ref="mockService"/>

</beans>
